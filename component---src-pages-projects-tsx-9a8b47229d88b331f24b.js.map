{"version":3,"file":"component---src-pages-projects-tsx-9a8b47229d88b331f24b.js","mappings":"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","sources":["webpack://lukas-bach/./src/components/atoms/detailed-list-item.tsx","webpack://lukas-bach/./node_modules/@mantine/hooks/esm/use-input-state/use-input-state.js","webpack://lukas-bach/./src/hooks/use-projects-by-year.ts","webpack://lukas-bach/./src/pages/projects.tsx"],"sourcesContent":["import { Box, BoxProps, Flex, Grid, Text, useMantineTheme } from \"@mantine/core\";\nimport { HiStar } from \"react-icons/hi2\";\nimport * as React from \"react\";\n\n// TODO responsiveness\n\nexport function DetailedListItem<T = \"a\">({\n  listCategory,\n  title,\n  description,\n  meta,\n  highlighted,\n  titleRightAligned,\n  ...props\n}: {\n  listCategory: string | undefined;\n  title: string;\n  description: string;\n  meta: string;\n  highlighted: boolean;\n  titleRightAligned?: boolean;\n} & import(\"@mantine/utils\").PolymorphicComponentProps<T, BoxProps>) {\n  const theme = useMantineTheme();\n  return (\n    <>\n      {listCategory && <Box sx={{ borderTop: `1px solid ${theme.colors.dark[5]}` }} mt={16} mb={12} />}\n      <Box\n        {...props}\n        sx={\n          {\n            textDecoration: \"none\",\n            \" > *\": {\n              borderRadius: theme.radius.md,\n            },\n            \":hover > *\": { backgroundColor: theme.colors.dark[9] },\n            \":focus > *\": {\n              outline: `2px solid ${theme.white}`,\n            },\n            \":focus\": {\n              outline: \"none\",\n            },\n          } as any\n        }\n      >\n        <Grid gutter=\"sm\" mb={8}>\n          <Grid.Col md={2}>\n            <Flex>\n              <Text color={theme.white}>{listCategory}</Text>\n              {highlighted && (\n                <Box sx={{ flexGrow: 1, textAlign: \"right\", color: theme.white }}>\n                  <HiStar />\n                </Box>\n              )}\n            </Flex>\n          </Grid.Col>\n          <Grid.Col md={3}>\n            <Text color={theme.white} align={titleRightAligned ? \"right\" : undefined}>\n              {title}\n            </Text>\n          </Grid.Col>\n          <Grid.Col md={5}>\n            <Text color={theme.colors.dark[1]}>{description}</Text>\n          </Grid.Col>\n          <Grid.Col md={2} sx={{ textAlign: \"right\" }}>\n            <Text color={theme.colors.dark[3]} sx={{ textTransform: \"capitalize\" }}>\n              {meta}\n            </Text>\n          </Grid.Col>\n        </Grid>\n      </Box>\n    </>\n  );\n}\n","import { useState } from 'react';\n\nfunction getInputOnChange(setValue) {\n  return (val) => {\n    if (!val) {\n      setValue(val);\n    } else if (typeof val === \"function\") {\n      setValue(val);\n    } else if (typeof val === \"object\" && \"nativeEvent\" in val) {\n      const { currentTarget } = val;\n      if (currentTarget.type === \"checkbox\") {\n        setValue(currentTarget.checked);\n      } else {\n        setValue(currentTarget.value);\n      }\n    } else {\n      setValue(val);\n    }\n  };\n}\nfunction useInputState(initialState) {\n  const [value, setValue] = useState(initialState);\n  return [value, getInputOnChange(setValue)];\n}\n\nexport { getInputOnChange, useInputState };\n//# sourceMappingURL=use-input-state.js.map\n","import { graphql, useStaticQuery } from \"gatsby\";\nimport { useMemo } from \"react\";\n\nconst useProjects = () =>\n  useStaticQuery<Queries.ProjectListQuery>(graphql`\n    query ProjectList {\n      allRepo {\n        nodes {\n          title\n          name\n          homepageData {\n            category\n            highlight\n            npm\n          }\n          stargazers_count\n          full_name\n          created_at\n          homepage\n          description\n        }\n      }\n    }\n  `).allRepo.nodes;\n\nexport const useProjectsByYear = (search: string, filters: string[]) => {\n  const projects = useProjects();\n  const projectsByYear = useMemo(() => {\n    const byYear = projects.reduce<Record<number, ReturnType<typeof useProjects>>>((yearObj, project) => {\n      const year = new Date(project.created_at ?? \"\").getFullYear();\n      return {\n        ...yearObj,\n        [year]: [...(yearObj[year] ?? []), project],\n      };\n    }, {});\n    for (const year of Object.keys(byYear)) {\n      byYear[year as any] = [...byYear[year as any]].sort(\n        (a, b) => new Date(b.created_at ?? \"\").getTime() - new Date(a.created_at ?? \"\").getTime()\n      );\n    }\n    return Object.entries(byYear).sort(([a], [b]) => b.localeCompare(a));\n  }, [projects]);\n  return useMemo(\n    () =>\n      projectsByYear\n        .map(\n          ([year, yearProjects]) =>\n            [\n              year,\n              yearProjects.filter(project => {\n                if (filters.length > 0 && !filters.includes(project.homepageData?.category ?? \"\")) {\n                  return false;\n                }\n\n                if (\n                  search.length > 0 &&\n                  !`${project.title} ${project.full_name} ${project.description} ${project.homepageData?.category}`\n                    .toLowerCase()\n                    .includes(search.toLowerCase())\n                ) {\n                  return false;\n                }\n\n                return true;\n              }),\n            ] as const\n        )\n        .filter(([, yearProjects]) => yearProjects.length > 0),\n    [projectsByYear, search, filters]\n  );\n};\n","import * as React from \"react\";\nimport type { HeadFC, PageProps } from \"gatsby\";\nimport { Box, Flex, Input, Title } from \"@mantine/core\";\nimport { Link } from \"gatsby\";\nimport { Fragment, useState } from \"react\";\nimport { HiMagnifyingGlass } from \"react-icons/hi2\";\nimport { useInputState } from \"@mantine/hooks\";\nimport { PageHead } from \"../components/atoms/page-head\";\nimport { ContentGrid } from \"../components/atoms/content-grid\";\nimport { PageLayout } from \"../components/layouts/page-layout\";\nimport { TransparentButton } from \"../components/atoms/transparent-button\";\nimport { DetailedListItem } from \"../components/atoms/detailed-list-item\";\nimport { useProjectsByYear } from \"../hooks/use-projects-by-year\";\nimport { useContainerSize } from \"../util\";\n\nconst Page: React.FC<PageProps> = () => {\n  const [search, setSearch] = useInputState(\"\");\n  const [filters, setFilters] = useState<string[]>([]);\n  const size = useContainerSize();\n  const small = [\"xs\", \"sm\"].includes(size);\n  const toggleFilter = (filter: string) => setFilters(!filters.includes(filter) ? [filter] : []);\n  // setFilters(!filters.includes(filter) ? [...filters, filter] : filters.filter(f => f !== filter));\n  const yearList = useProjectsByYear(search, filters);\n  return (\n    <PageLayout>\n      <ContentGrid>\n        <Title order={1} color=\"white\">\n          Projects\n        </Title>\n\n        <Flex sx={{ alignItems: \"center\" }} mt={32}>\n          {!small && (\n            <Box sx={{ flexGrow: 1 }}>\n              <Input\n                value={search}\n                onChange={setSearch}\n                placeholder=\"Search projects...\"\n                icon={<HiMagnifyingGlass />}\n              />\n            </Box>\n          )}\n          {[\"app\", \"library\", \"game\", \"template\", \"cli\", \"fun\"].map(filter => {\n            const isActive = filters.includes(filter);\n            return (\n              <TransparentButton\n                key={filter}\n                sx={{ textTransform: \"capitalize\" }}\n                active={isActive}\n                onClick={() => toggleFilter(filter)}\n                compact\n                ml={8}\n                aria-label={\n                  isActive ? `Filtering list for \"${filter}\". Click to disable filter` : `Filter for \"${filter}\"`\n                }\n              >\n                {filter}\n              </TransparentButton>\n            );\n          })}\n        </Flex>\n\n        {yearList.map(([year, projects]) => (\n          <Fragment key={year}>\n            {projects.map((project, i) => (\n              <DetailedListItem\n                key={project.full_name}\n                listCategory={i === 0 ? year : undefined}\n                title={project.title ?? \"\"}\n                description={project.description ?? \"\"}\n                meta={project.homepageData?.category ?? \"\"}\n                highlighted={project.homepageData?.highlight ?? false}\n                component={Link}\n                to={`/projects/${project.name ?? \"\"}`}\n              />\n            ))}\n          </Fragment>\n        ))}\n      </ContentGrid>\n    </PageLayout>\n  );\n};\n\nexport default Page;\n\nexport const Head: HeadFC = () => (\n  <PageHead title=\"Projects\" description=\"A list of programming projects I have worked on over the years.\" />\n);\n"],"names":["DetailedListItem","listCategory","title","description","meta","highlighted","titleRightAligned","props","theme","useMantineTheme","React","Box","sx","borderTop","colors","dark","mt","mb","textDecoration","borderRadius","radius","md","backgroundColor","outline","white","Grid","gutter","Flex","Text","color","flexGrow","textAlign","HiStar","align","undefined","textTransform","getInputOnChange","setValue","val","currentTarget","type","checked","value","useProjectsByYear","search","filters","projects","useStaticQuery","allRepo","nodes","projectsByYear","useMemo","byYear","reduce","yearObj","project","year","Date","created_at","getFullYear","Object","keys","_toConsumableArray","sort","a","b","getTime","entries","localeCompare","map","_ref3","yearProjects","filter","length","includes","homepageData","_project$homepageData2","category","full_name","_project$homepageData3","toLowerCase","_ref4","setSearch","initialState","useState","useInputState","setFilters","size","useContainerSize","small","yearList","PageLayout","ContentGrid","Title","order","alignItems","Input","onChange","placeholder","icon","HiMagnifyingGlass","isActive","TransparentButton","key","active","onClick","toggleFilter","compact","ml","_ref","Fragment","i","_project$homepageData4","highlight","component","Link","to","name","Head","PageHead"],"sourceRoot":""}