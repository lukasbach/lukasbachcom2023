{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/projects/uncomplex/","result":{"data":{"markdownRemark":{"html":"<p>Uncomplex is a library without dependencies for serializing and deserializing JavaScript datastructures\nthat contain complex objects such as class instances. It works be defining so called\n<em>EntityInterfaces</em> that detect whether they are compatible with a specified substructure,\nconvert it when serializing an object and reconvert it when parsing an object.</p>\n<h2>Quick Start</h2>\n<p>Install the package via</p>\n<pre><code>yarn add uncomplex\n</code></pre>\n<p>and call the following methods:</p>\n<pre><code class=\"language-ts\">import { Uncomplex } from 'uncomplex';\n\nconst uncomplex = Uncomplex.new().withEntityInterfaces(...entityInterfaces);\nconst stringified: string = uncomplex.stringifyObject(object);\nconst parsed: CustomDataStructure = uncomplex.parseObject(stringified);\n</code></pre>\n<p>You can define a custom EntityInterface by implementing <code>EntityInterface</code>:</p>\n<pre><code class=\"language-ts\">export interface UncomplexEntityInterface&#x3C;Original = any, Simplified extends object = object, SimplifyState extends object = any, ParseState extends object = SimplifyState> {\n  entityId: string;\n  applicableClasses?: any[];\n  isApplicable?: (object: Original) => boolean;\n  simplifyObject: (object: Original, key: string | number | undefined, state: Partial&#x3C;SimplifyState>) => Simplified;\n  parseObject: (object: Simplified, key: string | number | undefined, state: Partial&#x3C;ParseState>) => Original;\n}\n</code></pre>\n<p>Note that either <code>applicableClasses</code> (specifies a list of classes for which <code>instanceof</code> is used\nto determine whether the class can be mapped by the EntityInterface) or <code>isApplicable</code> must be\nimplemented.</p>\n<p>Alternatively, the following EntityInterfaces are implemented and can be imported from\nthe uncomplex library:</p>\n<ul>\n<li><code>BigIntEntityInterface</code>: Converts <code>bigint</code> instances</li>\n<li><code>DateEntityInterface</code>: Converts <code>Date</code> instances</li>\n<li><code>MapEntityInterface</code>: Converts <code>Map</code> instances</li>\n<li><code>SymbolEntityInterface</code>: Converts <code>symbol</code> instances</li>\n</ul>\n<h2>Basic Example</h2>\n<p>The following example can be found at <code>examples/customDataStructure.ts</code> and can be run\nvia <code>yarn example:customDataStructure</code>.</p>\n<pre><code class=\"language-ts\">class Example {\n  public param: string;\n  constructor(param: string) {\n    this.param = param;\n  }\n}\n\nexport const ExampleEntityInterface: UncomplexEntityInterface&#x3C;Example, { p: string }> = {\n  entityId: 'Example',\n  applicableClasses: [Example],\n  simplifyObject: object => ({ p: object.param }),\n  parseObject: object => new Example(object.p)\n};\n\nconst uncomplex = Uncomplex.new().withEntityInterfaces(ExampleEntityInterface);\nconst example = { ex: new Example('test') };\nconst asString = uncomplex.stringifyObject(example);\n\nconsole.log(asString);\n// {\"ex\":{\"p\":\"test\",\"__uncomplexId\":\"Example\"}}\n\nconst parsed = uncomplex.parseObject(asString);\nconsole.log(parsed.ex instanceof Example, parsed.ex.param);\n// true 'test'\n</code></pre>\n<h2>Example using predefined EntityInterfaces</h2>\n<p>The following example can be found at <code>examples/nativeDataStructure.ts</code> and can be run\nvia <code>yarn example:nativeDataStructure</code>.</p>\n<pre><code class=\"language-ts\">const uncomplex = Uncomplex.new().withEntityInterfaces(\n  BigIntEntityInterface, DateEntityInterface, MapEntityInterface, SymbolEntityInterface);\n\nconst map = new Map();\nmap.set('a', 'aa');\nmap.set('b', 42);\n\nconst sym1 = Symbol('a');\nconst sym2 = Symbol('b');\n\nconst example = { bigInt: BigInt(9999999999999), date: new Date(1800000000000), map, sym1, sym2, sym1alt: sym1 };\nconst asString = uncomplex.stringifyObject(example);\n\nconsole.log(asString);\n// {\n//   \"bigInt\":{\"n\":\"9999999999999\",\"__uncomplexId\":\"BigInt\"},\n//   \"date\":{\"iso\":\"2027-01-15T08:00:00.000Z\",\"__uncomplexId\":\"Date\"},\n//   \"map\":{\"entries\":[[\"a\",\"aa\"],[\"b\",42]],\"__uncomplexId\":\"Map\"},\n//   \"sym1\":{\"id\":0,\"key\":\"a\",\"__uncomplexId\":\"Symbol\"},\n//   \"sym2\":{\"id\":1,\"key\":\"b\",\"__uncomplexId\":\"Symbol\"},\n//   \"sym1alt\":{\"id\":0,\"key\":\"a\",\"__uncomplexId\":\"Symbol\"}\n// }\n\nconst parsed = uncomplex.parseObject(asString);\nconsole.log(parsed);\n// { bigInt: 9999999999999n,\n//   date: 2027-01-15T08:00:00.000Z,\n//   map: Map { 'a' => 'aa', 'b' => 42 },\n//   sym1: Symbol(a),\n//   sym2: Symbol(b),\n//   sym1alt: Symbol(a) }\n\nconsole.log(parsed.sym1 === parsed.sym2, parsed.sym1 === parsed.sym1alt);\n// false, true\n</code></pre>","excerpt":"Uncomplex is a library without dependencies for serializing and deserializing JavaScript datastructures\nthat contain complex objects such as class instances. It works be defining so called\nEntityInterfaces that detect whether they are compatible with a specified substructure,\nconvert it when serialâ€¦","frontmatter":{"date":"May 31, 2020","slug":"/projects/uncomplex","title":"Uncomplex","category":null,"kind":"project","repo":"lukasbach/uncomplex","download":null,"template":"advanced","medium":null,"devto":null}}},"pageContext":{"id":"24350e19-537e-5dfb-8c58-8a382bcaabbc","frontmatter__slug":"/projects/uncomplex","__params":{"frontmatter__slug":"projects"}}},"staticQueryHashes":["1266385000","3319912920","79628814"],"slicesMap":{}}