{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/projects/noindent/","result":{"data":{"markdownRemark":{"html":"<p>Allows you to use multiline strings created with template literals that\nwere constructed with indentation. <code>noindent</code> cleans out the indentation,\nmaking the resulting string clean from inconsistent indentations while\nstill being easy to read on code.</p>\n<p>Easy to use with trivial interface, creates no additional dependencies,\nincludes typings and is tiny (616 bytes minified, 369 bytes gzipped).</p>\n<h2>Example</h2>\n<pre><code class=\"language-typescript\">import noindent from 'noindent'\n\n(() => {\n  const result = noindent(`\n    Example input\n    \n    Usually, this would result in a string\n    that contains lots of unwanted whitespaces\n    \n      Which can lead to unwanted results if\n      the strings are used by whitespace-sensitive\n      code\n      \n    Or if the output is used as text where\n    whitespace is visible. \n  `)\n})()\n</code></pre>\n<p>produces <code>result</code> (whitespaces and line breaks that\nare preserved are displayed as symbols):</p>\n<pre><code>ExampleB7inputb\u000f\u000e\nb\u000f\u000e\nUsually,B7thisB7wouldB7resultB7inB7aB7stringb\u000f\u000e\nthatB7containsB7lotsB7ofB7unwantedB7whitespacesb\u000f\u000e\nb\u000f\u000e\nB7B7WhichB7canB7leadB7toB7unwantedB7resultsB7ifb\u000f\u000e\nB7B7theB7stringsB7areB7usedB7byB7whitespace-sensitiveb\u000f\u000e\nB7B7codeb\u000f\u000e\nb\u000f\u000e\nOrB7ifB7theB7outputB7isB7usedB7asB7textB7whereb\u000f\u000e\nwhitespaceB7isB7visible. \n</code></pre>\n<p>Note that further indentations, i.e. blocks of text that\nare further offset from the rest of the text, are preserved. Also,\nif the string is ended in a last line which only contains spaces, this\nline is omitted.</p>\n<h2>Installation</h2>\n<p>Install with <code>yarn add noindent</code> or <code>npm i noindent --save</code>,\nthen import with <code>import noindent from 'noindent'</code>\nor <code>const noindent = require('noindent')</code>.</p>\n<h2>Corner Cases</h2>\n<p>Various alternative syntax applications should work as well. The following\ncode snippets all produce the output</p>\n<pre><code>Test1b\u000f\u000e\nTest2b\u000f\u000e\nB7B7Test3\n</code></pre>\n<h3>Text starts in first line</h3>\n<pre><code class=\"language-typescript\">import noindent from 'noindent'\n\n(() => {\n  const result = noindent(`Test1\n    Test2\n      Test3\n  `)\n})()\n</code></pre>\n<h3>Text ends on last line with content</h3>\n<pre><code class=\"language-typescript\">import noindent from 'noindent'\n\n(() => {\n  const result = noindent(`\n    Test1\n    Test2\n      Test3`)\n})()\n</code></pre>","excerpt":"Allows you to use multiline strings created with template literals that\nwere constructed with indentation. noindent cleans out the indentation,\nmaking the resulting string clean from inconsistent indentations while\nstill being easy to read on code. Easy to use with trivial interface, creates no addâ€¦","frontmatter":{"date":"June 02, 2021","slug":"/projects/noindent","title":"noindent","category":null,"kind":"project","repo":"lukasbach/noindent","download":null,"template":"advanced","medium":null,"devto":null}}},"pageContext":{"id":"d1fab768-9826-5105-86ad-546d9685e4f8","frontmatter__slug":"/projects/noindent","__params":{"frontmatter__slug":"projects"}}},"staticQueryHashes":["1266385000","3319912920","79628814"],"slicesMap":{}}