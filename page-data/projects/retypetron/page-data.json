{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/projects/retypetron/","result":{"data":{"markdownRemark":{"html":"<p>Uses a minimal webpack config to bundle everything together, and includes\njust what you need to build your electron app. Tiny enough so that you keep\na good overview of everything, simple enough for you to add what you need\nand still complete enough to start working on production projects.</p>\n<p>Features:</p>\n<ul>\n<li>Completely typed, not only your application code, but also the electron\nmain process code, the webpack configuration files (editor suggestions\nin those files make extensions really easy!), and in json configuration\nfiles via json schemas.</li>\n<li>No built-in frontend libraries like <code>react-router</code> or <code>redux</code>. They\nare dead-simple to integrate manually, this boilerplate does not make\nassumptions about your tech stack.</li>\n<li><code>electron-builder</code> included for bundling the app for Windows, Linux\nand Mac. Easily adjustable configurations allows bundling installers or\nzipped portable packages.</li>\n<li><code>prettier</code> included for formatting.</li>\n</ul>\n<h2>Preparing releases</h2>\n<p>The CI pipeline is setup to automatically release new versions for\npushed tags. Make sure to bump the version in the <code>package.json</code>\nfile, and tag the commit with the new version (e.g. <code>v1.0.0</code>).</p>\n<p>The following manual steps have to be completed initially to setup\nreleases:</p>\n<ul>\n<li>Set a GitHub Actions secret with the name <code>GH_SECRET</code> that has repo access</li>\n<li>Set a suitable <code>appId</code> and <code>productName</code> in <code>electron-builder.json</code></li>\n<li>Set suitable <code>name</code>, <code>description</code>, <code>author</code>, <code>repository</code> values in <code>package.json</code></li>\n<li>Overwrite <code>resources/icon.png</code> with a suitable logo image. Note that, for the Mac OS build to work, it must be at least 512x512</li>\n</ul>\n<h2>Removing stuff</h2>\n<p>Utilities like <code>electron-builder</code> and <code>prettier</code> are included for\nconvenience, but can easily be removed if you don't want them.</p>\n<h3>Removing <code>electron-builder</code></h3>\n<ul>\n<li>Remove the fields <code>build:unpacked</code>, <code>build:packed</code>, <code>build</code> from\n<code>package.json:scripts</code>.</li>\n<li>Remove the dependency <code>electron-builder</code>.</li>\n<li>Remove the file <code>electron-builder.json</code>.</li>\n</ul>\n<h3>Removing <code>prettier</code></h3>\n<ul>\n<li>Remove the fields <code>prettier:check</code> and <code>prettier:write</code> from\n<code>package.json:scripts</code></li>\n<li>Remove the dependency <code>prettier</code>.</li>\n<li>Remove the file <code>prettierrc.json</code>.</li>\n</ul>\n<h2>FAQ</h2>\n<ul>\n<li>Where does the code land once built?\n<ul>\n<li>The built files <code>index.html</code>, <code>electron-main.js</code> and\n<code>js/main.js</code> (render logic) are placed in the <code>app/</code>\nfolder, which is loaded into the root of the\n<code>resources/app.asar</code> archive once built into an\ndistributable package.</li>\n</ul>\n</li>\n<li>How can I access the location of the built code?\n<ul>\n<li>e.g. <code>path.join(app.getAppPath(), '/app/index.html')</code></li>\n</ul>\n</li>\n<li>How can I add other files to be included into that archive?\n<ul>\n<li>Add the file paths as glob to the <code>files</code>-array in\n<code>electron-builder.json</code>.</li>\n</ul>\n</li>\n<li>How can I import images/css/scss/other custom things in\nTypeScript?\n<ul>\n<li>Add the relevant loaders in <code>webpack-renderer.config.ts</code>\nif you want to load those files in the render process, or\nin <code>webpack-electron.config.ts</code> for the main process.</li>\n</ul>\n</li>\n<li>How can I change the icon?\n<ul>\n<li><code>resources/icon.png</code></li>\n</ul>\n</li>\n<li>I don't want to use yarn.\n<ul>\n<li>Remove the file <code>yarn.lock</code>, change <code>yarn</code> to <code>npm run</code>\nin the scripts inside of <code>package.json</code>.</li>\n</ul>\n</li>\n<li>I want a more comprehensive boilerplate that includes more features.\n<ul>\n<li>Look into <a href=\"https://github.com/electron-react-boilerplate/electron-react-boilerplate\">https://github.com/electron-react-boilerplate/electron-react-boilerplate</a></li>\n</ul>\n</li>\n<li>Using async <code>fs</code>-method do not return and block indefinitely.\n<ul>\n<li><a href=\"https://github.com/electron/electron/issues/22119\">https://github.com/electron/electron/issues/22119</a></li>\n<li>TLDR: Set <code>app.allowRendererProcessReuse = false;</code> in <code>src/electron-main.ts:37</code></li>\n</ul>\n</li>\n</ul>","excerpt":"Uses a minimal webpack config to bundle everything together, and includes\njust what you need to build your electron app. Tiny enough so that you keep\na good overview of everything, simple enough for you to add what you need\nand still complete enough to start working on production projects. Featuresâ€¦","frontmatter":{"date":"September 09, 2020","slug":"/projects/retypetron","title":"ReTypeTron","category":null,"kind":"project","repo":"lukasbach/retypetron","download":null,"template":"advanced","medium":null,"devto":null}}},"pageContext":{"id":"c4e6f026-1755-5c28-9564-3feb5f079459","frontmatter__slug":"/projects/retypetron","__params":{"frontmatter__slug":"projects"}}},"staticQueryHashes":["1266385000","3319912920","79628814"],"slicesMap":{}}