{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/projects/scaffold-cli/","result":{"data":{"markdownRemark":{"html":"<p><img src=\"https://github.com/lukasbach/scaffold-cli/raw/main/./demo.gif\" alt=\"Scaffold CLI Demo\" title=\"Scaffold CLI Demo\"></p>\n<h2>How to use</h2>\n<p>Install the package</p>\n<pre><code class=\"language-bash\">npm i -g @lukasbach/scaffold\n</code></pre>\n<p>You can get started by adding the official react templates to the global template scope,\nand creating a react FC file:</p>\n<pre><code class=\"language-bash\">scaf add lukasbach/scaffold-cli/templates/react\nscaf react-fc \"My Component Name\"\n</code></pre>\n<p>If you want to further customize how the template works, you could</p>\n<ul>\n<li>\n<p>Provide additional parameters:</p>\n<pre><code class=\"language-bash\">scaf react-fc \"My Component Name\" --propsType inline --propsWithChildren false\n</code></pre>\n</li>\n<li>\n<p>Require scaffold to interactively ask for <em>all</em> parameters:</p>\n<pre><code class=\"language-bash\">scaf react-fc --all\n</code></pre>\n</li>\n<li>\n<p>Create an alias or redefinition of an existing template with custom config values:</p>\n<pre><code class=\"language-bash\">scaf customize react-fc -g\nscaf edit-config\n</code></pre>\n<p>Adds a custom template overwrite such as:</p>\n<pre><code class=\"language-yaml\">templates:\n  react-fc:\n    source: ./templates/react/react-fc\n    defaults:\n      componentName: My Component\n      dummyProp: false\n      exportPropsType: true\n      importReactSymbols: false\n      propsType: type\n      propsWithChildren: true\n      deconstructProps: true\n      filenameCase: paramCase\n      fileExtension: tsx\n    omitActions:\n      - tsFormat\n    postActions:\n      - eslint\n</code></pre>\n</li>\n</ul>\n<p>You can not only add and redefine templates globally, but also scoped to specific projects\non your disk. Run</p>\n<pre><code class=\"language-bash\">scaf init\n</code></pre>\n<p>in your project repository to create a scaffold config file and from there on customize templates\nscoped to your repository.</p>\n<h2>Available Templates</h2>\n<p>To add a template to the current scope, run <code>scaf add githubuser/reponame/path/to/templaterepo</code>. This\nwill add the available templates to the nearest <code>.scaf.yml</code>. You can add <code>--global</code> to add it to your user\nconfig.</p>\n<p>Generally, all parameters are optional when running a parameter. Parameters below marked with <code>[--param]</code> will\nuse preset default values if not provided, parameters marked with <code>--param</code> will ask the user in an interactive\nprompt for the intended value before evaluating the template.</p>\n<p>You can customize the default values for any template with <code>scaf customize template-name [--global]</code>.</p>\n<!-- TEMPLATE_LIST -->\n<h3>Core Templates</h3>\n<p>The following templates are core commands which are available by default.</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/lukasbach/scaffold-cli/raw/main//template-docs/core/add.md\"><strong>Add Template Repo</strong>: Add a template repository to the template scope</a></p>\n<p><code>scaf add &#x3C;repo> [-g,--global] </code></p>\n</li>\n<li>\n<p><a href=\"https://github.com/lukasbach/scaffold-cli/raw/main//template-docs/core/customize.md\"><strong>Customize Template</strong>: Customize the default values for a template that is available in the current scope</a></p>\n<p><code>scaf customize &#x3C;template> [-g,--global] </code></p>\n</li>\n<li>\n<p><a href=\"https://github.com/lukasbach/scaffold-cli/raw/main//template-docs/core/edit-config.md\"><strong>Edit Config</strong>: Edit global Scaffold Config file scoped to the local user</a></p>\n<p><code>scaf edit-config </code></p>\n</li>\n<li>\n<p><a href=\"https://github.com/lukasbach/scaffold-cli/raw/main//template-docs/core/init.md\"><strong>Initialize</strong>: Initialize a scaffold config on a code repository</a></p>\n<p><code>scaf init --addToReadme --defaultRepos=# </code></p>\n</li>\n<li>\n<p><a href=\"https://github.com/lukasbach/scaffold-cli/raw/main//template-docs/core/list.md\"><strong>List templates</strong>: List all available templates</a></p>\n<p><code>scaf list </code></p>\n</li>\n<li>\n<p><a href=\"https://github.com/lukasbach/scaffold-cli/raw/main//template-docs/core/scaf-snap.md\"><strong>Create Snapshots</strong>: Create snapshot dumps for all scaffold templates in a template repository.</a></p>\n<p><code>scaf scaf-snap --repo=# [--output=#] [--failOnChange] </code></p>\n</li>\n<li>\n<p><a href=\"https://github.com/lukasbach/scaffold-cli/raw/main//template-docs/core/update.md\"><strong>Update templates</strong>: Update local template repositories</a></p>\n<p><code>scaf update </code></p>\n</li>\n</ul>\n<h3>React Templates</h3>\n<p>The following templates are available in the template scope when adding the <code>lukasbach/scaffold-cli/react</code> template repository.</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/lukasbach/scaffold-cli/raw/main//template-docs/react/react-context.md\"><strong>React Context</strong>: A React context instance with context provider, hook and context type</a></p>\n<p><code>scaf react-context &#x3C;ctxName> [--propsTypeSuffix=#] [--contextVariableSuffix=#] [--fileExtension=#] [--placeTypeInDedicatedFile] [--placeHookInDedicatedFile] [--placeProviderInDedicatedFile] [--exportPropsType] [--dummyProp] [--importReactSymbols] [--deconstructProps] [--propsType=#] </code></p>\n</li>\n<li>\n<p><a href=\"https://github.com/lukasbach/scaffold-cli/raw/main//template-docs/react/react-fc.md\"><strong>React FC</strong>: React Functional Component</a></p>\n<p><code>scaf react-fc &#x3C;componentName> [--dummyProp] [--exportPropsType] [--importReactSymbols] [--propsType=#] [--propsWithChildren] [--deconstructProps] [--filenameCase=#] [--fileExtension=#] </code></p>\n</li>\n<li>\n<p><a href=\"https://github.com/lukasbach/scaffold-cli/raw/main//template-docs/react/react-forward-ref.md\"><strong>React Forwarded Ref</strong>: React Component with forwarded ref</a></p>\n<p><code>scaf react-forward-ref &#x3C;componentName> [--elementType=#] [--innerRef=#] [--includeUseRef] [--includeUseImperativeHandle] [--dummyProp] [--exportPropsType] [--importReactSymbols] [--propsType=#] [--propsWithChildren] [--deconstructProps] [--filenameCase=#] [--fileExtension=#] </code></p>\n</li>\n</ul>\n<!-- /TEMPLATE_LIST -->\n<h2>Writing your own templates</h2>\n<h3>Setting up your template repository</h3>\n<p>Within your repository, create a folder, let's name it \"templates\", and in there,\ncreate the files <code>scaffold-templates.yml</code> and <code>my-template.ts</code>.</p>\n<pre><code>my-repo/\n  templates/\n    scaffold-templates.yml\n    my-template.ts\n    my-other-template.ts\n    my-template-with-assets/\n      template.ts\n      some-asset.json\n  [.scaf.yml]\n</code></pre>\n<p>The <code>scaffold-templates.yml</code> file should contain the following content:</p>\n<pre><code class=\"language-yaml\">name: My Templates\ndescription: Description Text\nauthor: Lukas Bach\nkey: templates-key\n</code></pre>\n<p>We will look into how the template code looks like in the next section.\nThere are multiple ways how to make the templates available:</p>\n<ul>\n<li>\n<p>If you want them available within your project, add and edit the <code>.scaf.yml</code>\nfile mentioned in the file tree above in the top level of your project with\nthe following content:</p>\n<pre><code class=\"language-yaml\">repositories:\n- ./templates\n</code></pre>\n<p>You can also add more template repositories, either from your own machine or\nremotely.</p>\n</li>\n<li>\n<p>If you want them available everywhere on your machine, add the Yaml code\nabove to <code>~/.scaf.yml</code>. You can edit that file by running <code>scaf edit-config</code>.</p>\n</li>\n<li>\n<p>If you want them available on other machines, or publish them for other developers\nto use, create a git repository from your project, and push it to <code>gh-user-name/my-repo</code>.\nThen, use the following yaml code in a <code>.scaf.yml</code> file to reference the templates:</p>\n<pre><code class=\"language-yaml\">repositories:\n- gh-user-name/my-repo/templates\n</code></pre>\n<p>This will automatically pull the repo when calling the template. The repo can be private,\nbut needs to be pullable by your local git installation.</p>\n</li>\n</ul>\n<h3>Writing a template</h3>\n<p>This is an example for a template implementation:</p>\n<pre><code class=\"language-ts\">// Import is optional and provides type-safety for scaffold library.\n// Install \"@lukasbach/scaffold\" as dev dependency in your project for that.\nimport \"@lukasbach/scaffold/globals\"\n\nexport default async () => {\n  const sdk = scaffold.sdk().withDefaultCapabilities().build();\n  sdk.setTemplateName(\"React FC\");\n  sdk.setTemplateDescription(\"React Functional Component\");\n  \n  const componentName = await sdk.param\n    .string(\"componentName\")\n    .asArgument()\n    .default(\"My Component\")\n  \n  // custom side effects like fs operations should be wrapped in sdk.do()\n  await sdk.do(async () => {\n    // Some packages like fs-extra, execa (as $), yaml, os or git are available\n    // in global scope\n    const v = (await fs.readJSON(\"package.json\")).version\n  });\n  \n  // Accessible in templates via {{ myData.packageJson.version }}\n  sdk.setDataProperty(\"myData.packageJson.version\", v)\n  \n  // Apply handlebars template and add file to fs\n  // SDK-related functions are internally wrapped and don't explicitly need to\n  // be wrapped with sdk.do()\n  await sdk.actions.addFile(\"{{ camelCase componentName }}\", \"component.ts.hbl\")\n}\n</code></pre>\n<p>If your template just consists of code, you can add this code to\n<code>templates/my-template.ts</code>. If you want to add additional files like the\n<code>component.ts.hbl</code> file referenced above, add your template code to\n<code>templates/my-template/template.ts</code>.</p>\n<p>You can use handlebar templates in template files used by scaffold, so\n<code>templates/my-template/component.ts.hbl</code> could look like that:</p>\n<pre><code>/** template version v{{ myData.packageJson.version }} */\nconst {{ pascalCase componentName }} = () => &#x3C;div />;\n</code></pre>\n<p>You can look into official templates in the <a href=\"https://github.com/lukasbach/scaffold-cli/tree/main/templates\">/templates</a>\nfolder for more examples.</p>\n<h3>Running your template</h3>\n<p>Once the template is added to your <code>.scaf.yml</code> and you finished the code,\njust run <code>scaf my-template</code>. You don't need to build anything, scaffold\nwill compile your template on the fly.</p>\n<h3>Customizing existing templates</h3>\n<p>In your <code>.scaf.yml</code> file, you can customize existing templates by predefining\nparameters:</p>\n<pre><code class=\"language-yaml\">repositories:\n  - ./templates\ntemplates:\n  template-with-predefined-component-name:\n    source: ./templates/react/my-template\n    defaults:\n      componentName: Box\n</code></pre>\n<p>You can create this quickly by running <code>scaf customize</code>.</p>\n<h2>How to develop</h2>\n<ul>\n<li><code>yarn</code> to install dependencies</li>\n<li><code>yarn start</code> to run the CLI</li>\n<li><code>yarn lint</code> to test and fix linter errors</li>\n<li><code>yarn test</code> to check if template outputs have changed</li>\n</ul>\n<p>To publish a new version, <code>npm publish --access=public</code> is currently used.</p>","excerpt":"Scaffold CLI Demo How to use Install the package You can get started by adding the official react templates to the global template scope,\nand creating a react FC file: If you want to further customize how the template works, you could Provide additional parameters: Require scaffold to interactively…","frontmatter":{"date":"January 14, 2023","slug":"/projects/scaffold-cli","title":"Scaffold CLI","category":null,"kind":"project","repo":"lukasbach/scaffold-cli","download":null,"template":"advanced","medium":null,"devto":null}}},"pageContext":{"id":"433e8ab6-eca0-53c1-9e8b-fb475fed8fa1","frontmatter__slug":"/projects/scaffold-cli","__params":{"frontmatter__slug":"projects"}}},"staticQueryHashes":["1266385000","3319912920","79628814"],"slicesMap":{}}