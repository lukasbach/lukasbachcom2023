{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/projects/monaco-editor-auto-typings/","result":{"data":{"markdownRemark":{"html":"<p>monaco-editor-auto-typings is a plugin for <a href=\"https://microsoft.github.io/monaco-editor/\">Microsoft's Monaco Editor</a>,\nwhich automatically loads type declarations when you enter import-calls in the code editor.</p>\n<p>Try it out in the <a href=\"https://lukasbach.github.io/monaco-editor-auto-typings/\">demo</a>! Add some imports to some\nlibraries available on npm, such as <code>import express from 'express';</code>, and see that any imported variables\nare automatically strictly typed.</p>\n<p>monaco-editor-auto-typings comes with lots of customization options, but is still a one-liner to\nadd to your project. It works by loading declarations from UnPkg. They can then be optionally\ncached in localStorage or elsewhere.</p>\n<ul>\n<li>Demo: <a href=\"https://lukasbach.github.io/monaco-editor-auto-typings/\">lukasbach.github.io/monaco-editor-auto-typings</a></li>\n<li>Documentation: <a href=\"https://lukasbach.github.io/monaco-editor-auto-typings/docs/\">lukasbach.github.io/monaco-editor-auto-typings/docs</a></li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/lukasbach/monaco-editor-auto-typings/HEAD/screenshot.png\" alt=\"Example image\"></p>\n<h2>Example</h2>\n<p>Install via <code>yarn add monaco-editor-auto-typings monaco-editor</code> or <code>npm install monaco-editor-auto-typings monaco-editor --save</code>.</p>\n<pre><code class=\"language-typescript\">import * as monaco from 'monaco-editor/esm/vs/editor/editor.api';\nimport { AutoTypings, LocalStorageCache } from 'monaco-editor-auto-typings';\n\nconst val = `\nimport React from 'react';\nReact.useEffect(0); // Type Error!\n`;\n\n// Create monaco editor instance\nconst editor = monaco.editor.create(document.getElementById('root')!, {\n  model: monaco.editor.createModel(val, 'typescript'),\n});\n\n// Initialize auto typing on monaco editor. Imports will now automatically be typed!\nconst autoTypings = await AutoTypings.create(editor, {\n  sourceCache: new LocalStorageCache(), // Cache loaded sources in localStorage. May be omitted\n  // Other options...\n});\n</code></pre>\n<h2>Custom Monaco Version</h2>\n<p>By default, monaco-editor-auto-typings directly imports the monaco editor library itself. You can\ncustomize the monaco object with the <code>monaco</code> option. If you want to skip the entire import\nof monaco when bringing your own instance of monaco, you can import from <code>monaco-editor-auto-typings/custom-editor</code>\ninstead of <code>monaco-editor-auto-typings</code>.</p>\n<h2>Configuration</h2>\n<p><a href=\"https://lukasbach.github.io/monaco-editor-auto-typings/docs/interfaces/Options.html\">https://lukasbach.github.io/monaco-editor-auto-typings/docs/interfaces/Options.html</a></p>\n<pre><code class=\"language-typescript\">export interface Options {\n  /**\n   * Share source cache between multiple editor instances by storing\n   * the cache in a static property.\n   *\n   * Defaults to false.\n   */\n  shareCache: boolean;\n\n  /**\n   * Only use packages specified in the `versions` property.\n   *\n   * Defaults to false.\n   */\n  onlySpecifiedPackages: boolean;\n\n  /**\n   * Load typings from prespecified versions when initializing. Versions\n   * need to be specified in the ``versions`` option.\n   *\n   * Defaults to false.\n   */\n  preloadPackages: boolean;\n\n  /**\n   * Updates compiler options to defaults suitable for auto-loaded\n   * declarations, specifically by setting ``moduleResolution`` to\n   * ``NodeJs`` and ``allowSyntheticDefaultImports`` to true.\n   * Other options are not changed. Set this property to true to\n   * disable this behaviour.\n   *\n   * Defaults to false.\n   */\n  dontAdaptEditorOptions: boolean;\n\n  /**\n   * After typings were resolved and injected into monaco, auto-typings\n   * updates the value of the current model to trigger a refresh in\n   * monaco's typing logic, so that it uses the injected typings.\n   */\n  dontRefreshModelValueAfterResolvement: boolean;\n\n  /**\n   * Prespecified package versions. If a package is loaded whose\n   * name is specified in this object, it will load with the exact\n   * version specified in the object.\n   *\n   * Setting the option ``onlySpecifiedPackages`` to true makes this\n   * property act as a whitelist for packages.\n   *\n   * Setting the option ``preloadPackages`` makes the packages specified\n   * in this property load directly after initializing the auto-loader.\n   */\n  versions?: { [packageName: string]: string };\n\n  /**\n   * If a new package was loaded, its name and version is added to the\n   * version object, and this method is called with the updated object.\n   * @param versions updated versions object.\n   */\n  onUpdateVersions?: (versions: { [packageName: string]: string }) => void;\n\n  /**\n   * Supply a cache where declaration files and package.json files are\n   * cached to. Supply an instance of {@link LocalStorageCache} to cache\n   * files to localStorage.\n   */\n  sourceCache: SourceCache;\n\n  /**\n   * Supply a custom resolver logic for declaration and package.json files.\n   * Defaults to {@link JsDelivrSourceResolver}. Not recommended to change.\n   */\n  sourceResolver: SourceResolver;\n\n  /**\n   * The root directory where your edited files are. Must end with\n   * a slash. The default is suitable unless you change the default\n   * URI of files loaded in the editor.\n   *\n   * Defaults to \"inmemory://model/\"\n   */\n  fileRootPath: string;\n\n  /**\n   * Debounces code reanalyzing after user has changed the editor contents\n   * by the specified amount. Set to zero to disable. Value provided in\n   * milliseconds.\n   *\n   * Defaults to 4000, i.e. 4 seconds.\n   */\n  debounceDuration: number;\n\n  /**\n   * Maximum recursion depth for recursing packages. Determines how many\n   * nested package declarations are loaded. For example, if ``packageRecursionDepth``\n   * has the value 2, the code in the monaco editor references packages ``A1``, ``A2``\n   * and ``A3``, package ``A1`` references package ``B1`` and ``B1`` references ``C1``,\n   * then packages ``A1``, ``A2``, ``A3`` and ``B1`` are loaded. Set to zero to\n   * disable.\n   *\n   * Defaults to 3.\n   */\n  packageRecursionDepth: number;\n\n  /**\n   * Maximum recursion depth for recursing files. Determines how many\n   * nested file declarations are loaded. The same as ``packageRecursionDepth``,\n   * but for individual files. Set to zero to disable.\n   *\n   * Defaults to 10.\n   */\n  fileRecursionDepth: number;\n\n  /**\n   * Called after progress updates like loaded declarations or events.\n   * @param update detailed event object containing update infos.\n   * @param textual a textual representation of the update for debugging.\n   */\n  onUpdate?: (update: ProgressUpdate, textual: string) => void;\n\n  /**\n   * Called if errors occur.\n   * @param error a textual representation of the error.\n   */\n  onError?: (error: string) => void;\n}\n</code></pre>","excerpt":"monaco-editor-auto-typings is a plugin for Microsoft's Monaco Editor,\nwhich automatically loads type declarations when you enter import-calls in the code editor. Try it out in the demo! Add some imports to some\nlibraries available on npm, such as import express from 'express';, and see that any impâ€¦","frontmatter":{"date":"January 03, 2021","slug":"/projects/monaco-editor-auto-typings","title":"Monaco Editor Auto Typings","category":null,"kind":"project","repo":"lukasbach/monaco-editor-auto-typings","download":null,"template":"advanced","medium":null,"devto":null}}},"pageContext":{"id":"5b2a088e-a12e-58bf-b218-b1cb18557e10","frontmatter__slug":"/projects/monaco-editor-auto-typings","__params":{"frontmatter__slug":"projects"}}},"staticQueryHashes":["1266385000","3319912920","79628814"],"slicesMap":{}}