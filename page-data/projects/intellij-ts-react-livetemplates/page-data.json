{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/projects/intellij-ts-react-livetemplates/","result":{"data":{"markdownRemark":{"html":"<p>Live templates for TypeScript and typed React code, for IntelliJ IDEA,\nWebStorm, PHPStorm and other JetBrains IDEs. With sensible variable\nexpressions and useful skeleton templates.</p>\n<p>Supported templates:</p>\n<ul>\n<li><code>uses</code>: <em>React.useState()</em></li>\n<li><code>usee</code>: <em>React.useEffect()</em></li>\n<li><code>useh</code>: <em>React use Hook</em></li>\n<li><code>rfc</code>: <em>React Functional Component</em></li>\n<li><code>rfct</code>: <em>React typed Functional Component</em></li>\n<li><code>rfr</code>: <em>React forward Ref</em></li>\n<li><code>int</code>: <em>TypeScript Interface</em></li>\n<li><code>type</code>: <em>TypeScript Type</em></li>\n<li><code>arr</code>: <em>Anonymous arrow function</em></li>\n<li><code>el</code>: <em>JSX element</em></li>\n<li><code>rcctx</code>: <em>React create new Context with type, hook and provider</em></li>\n<li><code>ifs</code>: <em>import fs</em></li>\n<li><code>ipath</code>: <em>import path</em></li>\n<li><code>funarr</code>: <em>Arrow function variable</em></li>\n<li><code>fun</code>: <em>Function</em></li>\n<li><code>asyncarr</code>: <em>Async anonymous arrow function</em></li>\n<li><code>prom</code>: <em>New Promise</em></li>\n<li><code>timeout</code>: <em>setTimeout</em></li>\n<li><code>interval</code>: <em>setInterval</em></li>\n<li><code>usem</code>: <em>React.useMemo()</em></li>\n<li><code>usec</code>: <em>React.useCallback()</em></li>\n</ul>\n<p>If the library benefits, you can consider supporting it by <a href=\"https://github.com/sponsors/lukasbach\">sponsoring me</a>.</p>\n<h2>Template code</h2>\n<h3>React.useState()</h3>\n<p>Invoked via <code>uses</code>.</p>\n<pre><code>const [$VAR$, set$VAR_SET$] = useState($DEFAULT_VAL$);$END$\n</code></pre>\n<p>Variables:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Expression</th>\n<th>Default Value</th>\n<th>Skip if defined</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>VAR</code></td>\n<td><code>-</code></td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td><code>VAR_SET</code></td>\n<td><code>capitalize(VAR)</code></td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td><code>DEFAULT_VAL</code></td>\n<td><code>-</code></td>\n<td>false</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>React.useEffect()</h3>\n<p>Invoked via <code>usee</code>.</p>\n<pre><code>useEffect(() => {\n    $END$\n}, [$1$]);\n</code></pre>\n<p>Variables:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Expression</th>\n<th>Default Value</th>\n<th>Skip if defined</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>1</code></td>\n<td><code>-</code></td>\n<td>false</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>React use Hook</h3>\n<p>Invoked via <code>useh</code>.</p>\n<pre><code>const $3$ = use$1$($2$);$END$\n</code></pre>\n<p>Variables:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Expression</th>\n<th>Default Value</th>\n<th>Skip if defined</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>1</code></td>\n<td><code>completeSmart()</code></td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td><code>2</code></td>\n<td><code>completeSmart()</code></td>\n<td>{}</td>\n<td>false</td>\n</tr>\n<tr>\n<td><code>3</code></td>\n<td><code>-</code></td>\n<td>false</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>React Functional Component</h3>\n<p>Invoked via <code>rfc</code>.</p>\n<pre><code>export const $1$: React.FC&#x3C;{$2$}> = props => {\n    return (\n        &#x3C;$3$>\n            $END$\n        &#x3C;/$3$>\n    );\n};\n</code></pre>\n<p>Variables:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Expression</th>\n<th>Default Value</th>\n<th>Skip if defined</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>1</code></td>\n<td><code>-</code></td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td><code>2</code></td>\n<td><code>-</code></td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td><code>3</code></td>\n<td><code>-</code></td>\n<td>false</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>React typed Functional Component</h3>\n<p>Invoked via <code>rfct</code>.</p>\n<pre><code>export const $1$ = &#x3C;$2$>(props: PropsWithChildren&#x3C;$3$>) => {\n    return (\n        &#x3C;$4$>\n            $END$\n        &#x3C;/$4$>\n    );\n};\n</code></pre>\n<p>Variables:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Expression</th>\n<th>Default Value</th>\n<th>Skip if defined</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>1</code></td>\n<td><code>-</code></td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td><code>2</code></td>\n<td><code>-</code></td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td><code>3</code></td>\n<td><code>-</code></td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td><code>4</code></td>\n<td><code>-</code></td>\n<td>false</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>React forward Ref</h3>\n<p>Invoked via <code>rfr</code>.</p>\n<pre><code>export const $COMP$ = React.forwardRef&#x3C;HTML$ELEMENT_TYPE$ | null, $PROPS$>((props, ref) => {\n    const elementRef = useRef&#x3C;HTML$ELEMENT_TYPE$>(null);\n    useImperativeHandle&#x3C;HTML$ELEMENT_TYPE$ | null, HTML$ELEMENT_TYPE$ | null>(\n        ref,\n        () => elementRef.current &#x26;&#x26; {\n            ...elementRef.current,\n        },\n    );\n    $END$\n    return (\n        &#x3C;$INNER_COMP$ ref={elementRef} />\n    );\n});\n</code></pre>\n<p>Variables:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Expression</th>\n<th>Default Value</th>\n<th>Skip if defined</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>COMP</code></td>\n<td><code>-</code></td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td><code>ELEMENT_TYPE</code></td>\n<td><code>completeSmart()</code></td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td><code>PROPS</code></td>\n<td><code>-</code></td>\n<td>{}</td>\n<td>false</td>\n</tr>\n<tr>\n<td><code>INNER_COMP</code></td>\n<td><code>completeSmart()</code></td>\n<td>false</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>TypeScript Interface</h3>\n<p>Invoked via <code>int</code>.</p>\n<pre><code>export interface $1$ {\n    $END$\n}\n</code></pre>\n<p>Variables:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Expression</th>\n<th>Default Value</th>\n<th>Skip if defined</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>1</code></td>\n<td><code>-</code></td>\n<td>false</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>TypeScript Type</h3>\n<p>Invoked via <code>type</code>.</p>\n<pre><code>export type $1$ = {\n    $END$\n}\n</code></pre>\n<p>Variables:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Expression</th>\n<th>Default Value</th>\n<th>Skip if defined</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>1</code></td>\n<td><code>-</code></td>\n<td>false</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Anonymous arrow function</h3>\n<p>Invoked via <code>arr</code>.</p>\n<pre><code>($1$) => $2$\n</code></pre>\n<p>Variables:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Expression</th>\n<th>Default Value</th>\n<th>Skip if defined</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>1</code></td>\n<td><code>-</code></td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td><code>2</code></td>\n<td><code>-</code></td>\n<td>false</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>JSX element</h3>\n<p>Invoked via <code>el</code>.</p>\n<pre><code>&#x3C;$ELEMENT$PROPS$>\n    $END$\n&#x3C;/$ELEMENT$>\n</code></pre>\n<p>Variables:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Expression</th>\n<th>Default Value</th>\n<th>Skip if defined</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ELEMENT</code></td>\n<td><code>-</code></td>\n<td>div</td>\n<td>false</td>\n</tr>\n<tr>\n<td><code>PROPS</code></td>\n<td><code>-</code></td>\n<td>false</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>React create new Context with type, hook and provider</h3>\n<p>Invoked via <code>rcctx</code>.</p>\n<pre><code>type $CONTEXT_NAME_TYPE$ContextType = {\n    $END$\n};\n\nconst $CONTEXT_NAME$Context = React.createContext&#x3C;$CONTEXT_NAME$ContextType>($DEFAULT_VALUE$);\nexport const use$CONTEXT_NAME_HOOK$ = () => React.useContext($CONTEXT_NAME$Context);\n\nexport const $CONTEXT_NAME_PROVIDER$Provider: React.FC = props => {\n    return (\n        &#x3C;$CONTEXT_NAME$Context.Provider value={$VAL$}>\n            {props.children}\n        &#x3C;/$CONTEXT_NAME$Context.Provider>\n    );\n};\n</code></pre>\n<p>Variables:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Expression</th>\n<th>Default Value</th>\n<th>Skip if defined</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>CONTEXT_NAME</code></td>\n<td><code>-</code></td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td><code>CONTEXT_NAME_TYPE</code></td>\n<td><code>CONTEXT_NAME</code></td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td><code>DEFAULT_VALUE</code></td>\n<td><code>-</code></td>\n<td>{}</td>\n<td>false</td>\n</tr>\n<tr>\n<td><code>CONTEXT_NAME_HOOK</code></td>\n<td><code>capitalize(CONTEXT_NAME)</code></td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td><code>CONTEXT_NAME_PROVIDER</code></td>\n<td><code>capitalize(CONTEXT_NAME)</code></td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td><code>VAL</code></td>\n<td><code>-</code></td>\n<td>{}</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<h3>import fs</h3>\n<p>Invoked via <code>ifs</code>.</p>\n<pre><code>import fs from 'fs';\n</code></pre>\n<h3>import path</h3>\n<p>Invoked via <code>ipath</code>.</p>\n<pre><code>import path from 'path';\n</code></pre>\n<h3>Arrow function variable</h3>\n<p>Invoked via <code>funarr</code>.</p>\n<pre><code>const $VAR_NAME$ = ($PARAM$) => $END$;\n</code></pre>\n<p>Variables:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Expression</th>\n<th>Default Value</th>\n<th>Skip if defined</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>VAR_NAME</code></td>\n<td><code>jsSuggestVariableName()</code></td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td><code>PARAM</code></td>\n<td><code>-</code></td>\n<td>false</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Function</h3>\n<p>Invoked via <code>fun</code>.</p>\n<pre><code>function $FUNCTION_NAME$($PARAM$) {\n    $END$\n}\n</code></pre>\n<p>Variables:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Expression</th>\n<th>Default Value</th>\n<th>Skip if defined</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>FUNCTION_NAME</code></td>\n<td><code>-</code></td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td><code>PARAM</code></td>\n<td><code>-</code></td>\n<td>false</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Async anonymous arrow function</h3>\n<p>Invoked via <code>asyncarr</code>.</p>\n<pre><code>async ($1$) => $2$\n</code></pre>\n<p>Variables:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Expression</th>\n<th>Default Value</th>\n<th>Skip if defined</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>1</code></td>\n<td><code>-</code></td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td><code>2</code></td>\n<td><code>-</code></td>\n<td>false</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>New Promise</h3>\n<p>Invoked via <code>prom</code>.</p>\n<pre><code>new Promise&#x3C;$TYPE$((res, rej) => {\n    $END$\n});\n</code></pre>\n<p>Variables:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Expression</th>\n<th>Default Value</th>\n<th>Skip if defined</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>TYPE</code></td>\n<td><code>-</code></td>\n<td>void</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<h3>setTimeout</h3>\n<p>Invoked via <code>timeout</code>.</p>\n<pre><code>setTimeout(() => $END$, $TIME$);\n</code></pre>\n<p>Variables:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Expression</th>\n<th>Default Value</th>\n<th>Skip if defined</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>TIME</code></td>\n<td><code>completeSmart()</code></td>\n<td>false</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>setInterval</h3>\n<p>Invoked via <code>interval</code>.</p>\n<pre><code>setInterval(() => $END$, $TIME$);\n</code></pre>\n<p>Variables:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Expression</th>\n<th>Default Value</th>\n<th>Skip if defined</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>TIME</code></td>\n<td><code>completeSmart()</code></td>\n<td>false</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>React.useMemo()</h3>\n<p>Invoked via <code>usem</code>.</p>\n<pre><code>const $VAR$ = useMemo(() => $RETURN$, [$DEP$]);\n</code></pre>\n<p>Variables:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Expression</th>\n<th>Default Value</th>\n<th>Skip if defined</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>RETURN</code></td>\n<td><code>completeSmart()</code></td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td><code>DEP</code></td>\n<td><code>completeSmart()</code></td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td><code>VAR</code></td>\n<td><code>-</code></td>\n<td>false</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>React.useCallback()</h3>\n<p>Invoked via <code>usec</code>.</p>\n<pre><code>const $VAR$ = useCallback(() => $RETURN$, [$DEP$]);\n</code></pre>\n<p>Variables:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Expression</th>\n<th>Default Value</th>\n<th>Skip if defined</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>RETURN</code></td>\n<td><code>completeSmart()</code></td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td><code>DEP</code></td>\n<td><code>completeSmart()</code></td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td><code>VAR</code></td>\n<td><code>-</code></td>\n<td>false</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2>Contributions</h2>\n<p>Feel free to contribute to existing or new templates with issues or pull requests.</p>\n<p>To test if your changes are working, clone the repo and run the gradle script <code>runIde</code>.</p>\n<p>Do not update the documentation in the readme.md or plugin.xml files, they are updated\nautomatically.</p>","excerpt":"Live templates for TypeScript and typed React code, for IntelliJ IDEA,\nWebStorm, PHPStorm and other JetBrains IDEs. With sensible variable\nexpressions and useful skeleton templates. Supported templates: uses: React.useState() usee: React.useEffect() useh: React use Hook rfc: React Functional Compon…","frontmatter":{"date":"May 15, 2021","slug":"/projects/intellij-ts-react-livetemplates","title":"IntelliJ TS React Live Templates","category":null,"kind":"project","repo":"lukasbach/intellij-ts-react-livetemplates","download":null,"template":"advanced","medium":null,"devto":null}}},"pageContext":{"id":"f6e2ac3c-e03e-56e1-9611-6720340de0ba","frontmatter__slug":"/projects/intellij-ts-react-livetemplates","__params":{"frontmatter__slug":"projects"}}},"staticQueryHashes":["1266385000","3319912920","79628814"],"slicesMap":{}}