{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/projects/ayemitter/","result":{"data":{"markdownRemark":{"html":"<p>A typed easy-to-use event emitter that you can just construct with a event\ntype and start adding handlers. Aye!</p>\n<h2>Usage</h2>\n<pre><code>yarn add ayemitter\n</code></pre>\n<p>Create a <code>EventEmitter</code> instance typed to whatever your\npayload type is, add handlers and emit a new event.</p>\n<pre><code class=\"language-typescript\">import { EventEmitter } from 'ayemitter';\n\nconst emitter = new EventEmitter&#x3C;string>();\n\nemitter.on(payload => {\n  console.log('Handler 1 ' + payload);\n});\n\nemitter.on(payload => {\n  console.log('Handler 2 ' + payload);\n});\n\nemitter.emit('yup');\n// Outputs:\n//   Handler 1 yup\n//   Handler 2 yup\n</code></pre>\n<p>If one or more handlers are asynchronous, the <code>emit</code>\ncall waits for all handlers to finish. All handlers are\ninvoked at the same time.</p>\n<pre><code class=\"language-typescript\">import { EventEmitter } from 'ayemitter';\n\nconst emitter = new EventEmitter&#x3C;string>();\n\nemitter.on(async payload => {\n  // waits for 2 seconds\n});\n\nemitter.on(async payload => {\n  // waits for 1 second\n});\n\nemitter.on(async payload => {\n  // immediately returns\n});\n\nemitter.emit('yup').then(() => console.log('Done!'));\n// All three handlers are invoked at the same time\n// \"Done!\" is outputted after 2 seconds, i.e. after\n// all handlers are finished\n</code></pre>\n<h2>API</h2>\n<pre><code class=\"language-typescript\">interface EventEmitter&#x3C;EventPayload> {\n  constructor(options?: EventEmitterOptions&#x3C;EventPayload>);\n  get numberOfHandlers(): number;\n  emit(payload: EventPayload): Promise&#x3C;void>;\n  on(handler: EventHandler&#x3C;EventPayload>): number;\n  off(handlerId: number): void;\n  delete(handlerId: number): void;\n}\n\ninterface EventEmitterOptions&#x3C;EventPayload = any> {\n    logger?: (log: string, payload?: EventPayload) => void;\n}\n\ntype EventHandler&#x3C;EventPayload> = ((payload: EventPayload) => Promise&#x3C;void> | void) | null | undefined;\n</code></pre>\n<h2>React Hook</h2>\n<p>Use in conjunction with <code>ayemitter-hook</code> to use as React hook.</p>\n<pre><code>yarn add ayemitter ayemitter-hook\n</code></pre>\n<pre><code class=\"language-typescript\" data-meta=\"jsx\">import { EventEmitter } from 'ayemitter';\nimport { useEventChangeHandler } from 'ayemitter-hook';\n\nconst emitter = new EventEmitter&#x3C;string>();\nconst Component = () => {\n  const [state, setState] = useState('state1');\n  useEventChangeHandler(\n    emitter,\n    () => {\n      console.log('Hello!');\n    },\n    [state]\n  ); // state is a dependency\n\n  // The handler is rebinded to the emitter everytime the\n  // handler or a dependency changes.\n\n  return; // ...\n};\n</code></pre>\n<h3>Hook API</h3>\n<pre><code class=\"language-typescript\">const useEventChangeHandler: &#x3C;T>(\n  eventEmitter: EventEmitter&#x3C;T>,\n  handler: (payload: T) => void | Promise&#x3C;void>,\n  dependencies?: any[]\n) => void;\n</code></pre>\n<h2>Development</h2>\n<p>When developing locally, run in the root directory...</p>\n<ul>\n<li><code>yarn</code> to install dependencies</li>\n<li><code>yarn test</code> to run tests in all packages</li>\n<li><code>yarn build</code> to build distributables and typings in <code>packages/{package}/out</code></li>\n<li><code>yarn storybook</code> to run a local storybook server</li>\n<li><code>yarn build-storybook</code> to build the storybook</li>\n<li><a href=\"https://github.com/lerna/lerna/tree/main/commands/version#readme\"><code>npx lerna version</code></a> to interactively bump the\npackages versions. This automatically commits the version, tags the commit and pushes to git remote.</li>\n<li><a href=\"https://github.com/lerna/lerna/tree/main/commands/publish#readme\"><code>npx lerna publish</code></a> to publish all packages\nto NPM that have changed since the last release. This automatically bumps the versions interactively.</li>\n</ul>","excerpt":"A typed easy-to-use event emitter that you can just construct with a event\ntype and start adding handlers. Aye! Usage Create a EventEmitter instance typed to whatever your\npayload type is, add handlers and emit a new event. If one or more handlers are asynchronous, the emit\ncall waits for all handlâ€¦","frontmatter":{"date":"February 16, 2021","slug":"/projects/ayemitter","title":"Ayemitter","category":null,"kind":"project","repo":"lukasbach/ayemitter","download":null,"template":"advanced","medium":null,"devto":null}}},"pageContext":{"id":"de482d09-460a-516f-8190-8f61bea04bbf","frontmatter__slug":"/projects/ayemitter","__params":{"frontmatter__slug":"projects"}}},"staticQueryHashes":["1266385000","3319912920","79628814"],"slicesMap":{}}